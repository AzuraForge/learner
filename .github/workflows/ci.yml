name: AzuraForge Learner CI

# Bu workflow'un ne zaman çalışacağını belirler
on:
  push:
    branches: [ "main" ] # Sadece main branch'ine yapılan push'larda
  pull_request:
    branches: [ "main" ] # Main branch'ine açılan her PR'da

jobs:
  build-and-test:
    runs-on: ubuntu-latest # Workflow'un çalışacağı sanal makine (Linux)
    strategy:
      matrix:
        python-version: ["3.10", "3.11"] # Farklı Python versiyonlarında test et

    steps:
    # 1. Adım: Repoyu sanal makineye klonla
    - uses: actions/checkout@v4

    # 2. Adım: Belirtilen Python versiyonunu kur
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    # 3. Adım: Bağımlılıkları kur (pip ve proje bağımlılıkları)
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Core kütüphanesini doğrudan Git'ten kur
        pip install git+https://github.com/AzuraForge/core.git@v0.1.2
        # Learner'ın kendisini ve test bağımlılıklarını kur
        pip install -e .[dev]

    # 4. Adım: Kod stilini kontrol et (Black)
    - name: Check code format with Black
      run: |
        pip install black
        black --check .

    # 5. Adım: Linting kontrolü yap (flake8)
    - name: Lint with flake8
      run: |
        pip install flake8
        # --count -> hata sayısını göster, --select -> kontrol edilecek hatalar, --ignore -> göz ardı edilecekler
        # --max-line-length -> satır uzunluğu limiti
        flake8 src --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src --count --max-complexity=10 --max-line-length=127 --statistics

    # 6. Adım: Testleri çalıştır (pytest)
    - name: Test with pytest
      run: |
        pytest